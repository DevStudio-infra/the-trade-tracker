generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Strategy {
  id             String        @id @default(uuid())
  name           String
  description    String
  rules          Json
  timeframes     String[]
  riskParameters Json
  isActive       Boolean       @default(true)
  isPublic       Boolean       @default(false)
  userId         String?
  createdAt      DateTime      @default(now()) @map("created_at")
  botInstances   BotInstance[]
  user           User?         @relation(fields: [userId], references: [id])

  @@unique([name, userId])
  @@map("strategies")
}

model BotInstance {
  id           String         @id @default(uuid())
  userId       String         @map("user_id")
  strategyId   String         @map("strategy_id")
  pair         String
  timeframe    String
  riskSettings Json           @map("risk_settings")
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  evaluations  AIEvaluation[]
  strategy     Strategy       @relation(fields: [strategyId], references: [id])
  signals      Signal[]
  trades       Trade[]

  @@map("bot_instances")
}

model RAGEmbedding {
  id         String   @id @default(uuid())
  strategyId String   @unique @map("strategy_id")
  embedding  Float[]
  metadata   Json
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("rag_embeddings")
}

model Signal {
  id            String         @id @default(uuid())
  botInstanceId String         @map("bot_instance_id")
  userId        String         @map("user_id")
  pair          String
  timeframe     String
  signalType    String         @map("signal_type")
  confidence    Int
  stopLoss      Decimal        @map("stop_loss")
  takeProfit    Decimal        @map("take_profit")
  riskScore     Int            @map("risk_score")
  chartImageUrl String         @map("chart_image_url")
  status        String
  createdAt     DateTime       @default(now()) @map("created_at")
  executedAt    DateTime?      @map("executed_at")
  tradeId       String?        @unique @map("trade_id")
  evaluations   AIEvaluation[]
  ChartImage    ChartImage[]
  botInstance   BotInstance    @relation(fields: [botInstanceId], references: [id])
  trade         Trade?         @relation(fields: [tradeId], references: [id])
  User          User           @relation(fields: [userId], references: [id])

  @@map("signals")
}

model Trade {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  botInstanceId String      @map("bot_instance_id")
  signalId      String?     @unique @map("signal_id")
  pair          String
  entryPrice    Decimal     @map("entry_price")
  exitPrice     Decimal?    @map("exit_price")
  quantity      Decimal
  profitLoss    Decimal?    @map("profit_loss")
  riskPercent   Decimal     @map("risk_percent")
  riskReward    Decimal?    @map("risk_reward")
  createdAt     DateTime    @default(now()) @map("created_at")
  closedAt      DateTime?   @map("closed_at")
  metadata      Json
  signal        Signal?
  botInstance   BotInstance @relation(fields: [botInstanceId], references: [id])
  User          User        @relation(fields: [userId], references: [id])

  @@map("trades")
}

model AIEvaluation {
  id            String      @id @default(uuid())
  signalId      String      @map("signal_id")
  botInstanceId String      @map("bot_instance_id")
  evalType      String      @map("eval_type")
  chartImageUrl String      @map("chart_image_url")
  promptUsed    String      @map("prompt_used")
  llmResponse   Json        @map("llm_response")
  createdAt     DateTime    @default(now()) @map("created_at")
  metadata      Json
  botInstance   BotInstance @relation(fields: [botInstanceId], references: [id])
  signal        Signal      @relation(fields: [signalId], references: [id])

  @@map("ai_evaluations")
}

model User {
  id                   String              @id @default(cuid())
  email                String              @unique
  name                 String?
  subscription_plan    String              @default("Free")
  credits              Int                 @default(0)
  onboarding_step      Int                 @default(1)
  onboarding_completed Boolean             @default(false)
  is_active            Boolean             @default(true)
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  last_login           DateTime?
  settings             UserSettings?
  signals              Signal[]
  trades               Trade[]
  onboarding           UserOnboarding?
  watchlist_items      WatchlistItem[]
  strategies           Strategy[]
  broker_credentials   BrokerCredential[]
  CreditTransaction    CreditTransaction[]
  CreditPurchase       CreditPurchase[]

  @@map("users")
}

model UserOnboarding {
  id         String   @id @default(uuid())
  user_id    String   @unique
  step       Int      @default(1)
  status     String   @default("Not_Started")
  data       Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])

  @@map("user_onboarding")
}

model BrokerCredential {
  id          String    @id @default(uuid())
  user_id     String
  broker_name String
  description String    @default("")
  credentials Json
  is_active   Boolean   @default(true)
  is_demo     Boolean   @default(false)
  last_used   DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id])

  @@map("broker_credentials")
}

model CreditTransaction {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  creditsUsed   Int      @map("credits_used")
  action        String
  balanceBefore Int      @map("balance_before")
  balanceAfter  Int      @map("balance_after")
  metadata      Json
  createdAt     DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [userId], references: [id])

  @@map("credit_transactions")
}

model CreditPurchase {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  amount    Int
  cost      Decimal
  paymentId String   @map("payment_id")
  status    String
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("credit_purchases")
}

model ChartImage {
  id          String   @id @default(uuid())
  signalId    String   @map("signal_id")
  timeframe   String
  chartType   String   @map("chart_type")
  storagePath String   @map("storage_path")
  publicUrl   String   @map("public_url")
  createdAt   DateTime @default(now()) @map("created_at")
  metadata    Json
  signal      Signal   @relation(fields: [signalId], references: [id])

  @@map("chart_images")
}

model WatchlistItem {
  id           String   @id @default(uuid())
  user_id      String
  symbol       String
  broker_id    String?
  added_at     DateTime @default(now())
  notes        String?
  price_alerts Json?
  user         User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, symbol])
  @@map("watchlist_items")
}

model CapitalComPair {
  symbol      String   @id
  displayName String
  type        String
  category    String
  minQuantity Decimal? @db.Decimal(10, 5)
  maxQuantity Decimal? @db.Decimal(10, 5)
  precision   Int?
  isActive    Boolean  @default(true)
  lastUpdated DateTime @default(now()) @updatedAt

  @@index([category])
  @@index([type])
  @@map("capital_com_pairs")
}

model MarketDataCache {
  symbol      String
  timeframe   String
  startTime   DateTime
  endTime     DateTime
  data        String   @db.Text
  lastUpdated DateTime @default(now())
  isComplete  Boolean  @default(true)

  @@id([symbol, timeframe, startTime, endTime])
  @@index([lastUpdated])
}

model PerformanceMetrics {
  id              String   @id @default(cuid())
  timestamp       DateTime @default(now())
  totalTrades     Int
  winningTrades   Int
  losingTrades    Int
  totalProfitLoss Decimal
  winRate         Decimal
  averageWin      Decimal
  averageLoss     Decimal
  profitFactor    Decimal
  maxDrawdown     Decimal
  sharpeRatio     Decimal
  dailyProfitLoss Decimal
  openPositions   Int
  marginUsage     Decimal

  @@index([timestamp])
}

model AccountBalance {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  total     Decimal
  available Decimal
  locked    Decimal
  currency  String

  @@index([timestamp])
}

model UserSettings {
  id                    String   @id @default(cuid())
  user_id               String   @unique
  theme                 String   @default("system")
  notifications_enabled Boolean  @default(true)
  email_notifications   Boolean  @default(true)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
