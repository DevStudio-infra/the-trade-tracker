// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

// User Management
model User {
    id                  String    @id // From Clerk
    createdAt           DateTime  @default(now()) @map("created_at")
    updatedAt           DateTime  @updatedAt @map("updated_at")
    name                String?
    tradingExperience   String?   @map("trading_experience")
    preferredMarkets    String[]  @map("preferred_markets")
    riskTolerance       String?   @map("risk_tolerance")
    subscriptionPlan    String    @default("Free") @map("subscription_plan")
    credits             Int       @default(6)
    lastLogin           DateTime? @map("last_login")
    onboardingCompleted Boolean   @default(false) @map("onboarding_completed")
    onboardingStep      Int       @default(1) @map("onboarding_step")
    isActive            Boolean   @default(true) @map("is_active")

    // Relations
    agreements         UserAgreement[]
    onboarding         UserOnboarding?
    brokerCredentials  BrokerCredential[]
    trades             Trade[]
    signals            Signal[]
    creditPurchases    CreditPurchase[]
    creditTransactions CreditTransaction[]
    achievements       Achievement[]
    notifications      Notification[]
    sentMessages       Message[]           @relation("SentMessages")
    receivedMessages   Message[]           @relation("ReceivedMessages")
    followers          Follow[]            @relation("Followers")
    following          Follow[]            @relation("Following")
    analytics          Analytics[]
    leaderboardEntries Leaderboard[]

    @@map("users")
}

model UserAgreement {
    id            String   @id @default(uuid())
    userId        String   @map("user_id")
    agreementType String   @map("agreement_type")
    version       String
    acceptedAt    DateTime @default(now()) @map("accepted_at")
    ipAddress     String   @map("ip_address")
    userAgent     String   @map("user_agent")
    metadata      Json

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@map("user_agreements")
}

model UserOnboarding {
    id        String   @id @default(uuid())
    userId    String   @unique @map("user_id")
    step      Int
    status    String
    data      Json
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@map("user_onboarding")
}

model BrokerCredential {
    id          String    @id @default(uuid())
    userId      String    @map("user_id")
    brokerName  String    @map("broker_name")
    credentials Json
    isActive    Boolean   @default(true) @map("is_active")
    isDemo      Boolean   @default(false) @map("is_demo")
    lastUsed    DateTime? @map("last_used")
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    metadata    Json

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@map("broker_credentials")
}

model Trade {
    id              String    @id @default(uuid())
    userId          String    @map("user_id")
    pair            String
    entryPrice      Decimal   @map("entry_price")
    exitPrice       Decimal?  @map("exit_price")
    quantity        Decimal
    profitLoss      Decimal?  @map("profit_loss")
    createdAt       DateTime  @default(now()) @map("created_at")
    closedAt        DateTime? @map("closed_at")
    strategyUsed    String    @map("strategy_used")
    confidenceScore Int       @map("confidence_score")

    // Relations
    user   User    @relation(fields: [userId], references: [id])
    signal Signal?

    @@map("trades")
}

model Signal {
    id               String    @id @default(uuid())
    userId           String    @map("user_id")
    pair             String
    timeframe        String
    signalType       String    @map("signal_type")
    confidence       Int
    strategy         String
    stopLoss         Decimal   @map("stop_loss")
    takeProfit       Decimal   @map("take_profit")
    riskPercentScore Int       @map("risk_percent_score")
    chartImageUrl    String    @map("chart_image_url")
    status           String
    createdAt        DateTime  @default(now()) @map("created_at")
    executedAt       DateTime? @map("executed_at")
    tradeId          String?   @unique @map("trade_id")

    // Relations
    user               User                @relation(fields: [userId], references: [id])
    trade              Trade?              @relation(fields: [tradeId], references: [id])
    evaluations        AIEvaluation[]
    chartImages        ChartImage[]
    creditTransactions CreditTransaction[]

    @@map("signals")
}

model AIEvaluation {
    id             String   @id @default(uuid())
    signalId       String   @map("signal_id")
    evaluationType String   @map("evaluation_type")
    chartImageUrl  String   @map("chart_image_url")
    promptUsed     String   @map("prompt_used")
    llmResponse    Json     @map("llm_response")
    createdAt      DateTime @default(now()) @map("created_at")
    metadata       Json

    // Relations
    signal Signal @relation(fields: [signalId], references: [id])

    @@map("ai_evaluations")
}

model ChartImage {
    id          String   @id @default(uuid())
    signalId    String   @map("signal_id")
    timeframe   String
    chartType   String   @map("chart_type")
    storagePath String   @map("storage_path")
    publicUrl   String   @map("public_url")
    createdAt   DateTime @default(now()) @map("created_at")
    metadata    Json

    // Relations
    signal Signal @relation(fields: [signalId], references: [id])

    @@map("chart_images")
}

model CreditPurchase {
    id        String   @id @default(uuid())
    userId    String   @map("user_id")
    amount    Int
    cost      Decimal
    paymentId String   @map("payment_id")
    status    String
    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@map("credit_purchases")
}

model CreditTransaction {
    id            String   @id @default(uuid())
    userId        String   @map("user_id")
    creditsUsed   Int      @map("credits_used")
    action        String
    signalId      String?  @map("signal_id")
    balanceBefore Int      @map("balance_before")
    balanceAfter  Int      @map("balance_after")
    createdAt     DateTime @default(now()) @map("created_at")
    metadata      Json

    // Relations
    user   User    @relation(fields: [userId], references: [id])
    signal Signal? @relation(fields: [signalId], references: [id])

    @@map("credit_transactions")
}

model Strategy {
    id             String @id @default(uuid())
    name           String @unique
    description    String
    rules          String
    confirmationTf String @map("confirmation_tf")

    // Relations
    embedding RAGEmbedding?

    @@map("strategies")
}

model RAGEmbedding {
    id         String                      @id @default(uuid())
    strategyId String                      @unique @map("strategy_id")
    embedding  Unsupported("vector(1536)")
    createdAt  DateTime                    @default(now()) @map("created_at")

    // Relations
    strategy Strategy @relation(fields: [strategyId], references: [id])

    @@map("rag_embeddings")
}

model Leaderboard {
    id              String   @id @default(uuid())
    userId          String   @map("user_id")
    totalProfit     Decimal  @map("total_profit")
    winRate         Decimal  @map("win_rate")
    riskRewardRatio Decimal  @map("risk_reward_ratio")
    sharpeRatio     Decimal  @map("sharpe_ratio")
    createdAt       DateTime @default(now()) @map("created_at")

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@map("leaderboard")
}

model Achievement {
    id              String   @id @default(uuid())
    userId          String   @map("user_id")
    achievementType String   @map("achievement_type")
    description     String
    createdAt       DateTime @default(now()) @map("created_at")

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@map("achievements")
}

model Notification {
    id        String   @id @default(uuid())
    userId    String   @map("user_id")
    type      String
    message   String
    read      Boolean  @default(false)
    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@map("notifications")
}

model Message {
    id         String   @id @default(uuid())
    senderId   String   @map("sender_id")
    receiverId String   @map("receiver_id")
    content    String
    createdAt  DateTime @default(now()) @map("created_at")

    // Relations
    sender   User @relation("SentMessages", fields: [senderId], references: [id])
    receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

    @@map("messages")
}

model Follow {
    id         String   @id @default(uuid())
    followerId String   @map("follower_id")
    followedId String   @map("followed_id")
    createdAt  DateTime @default(now()) @map("created_at")

    // Relations
    follower User @relation("Following", fields: [followerId], references: [id])
    followed User @relation("Followers", fields: [followedId], references: [id])

    @@map("follows")
}

model Analytics {
    id              String   @id @default(uuid())
    userId          String   @map("user_id")
    performanceData Json     @map("performance_data")
    createdAt       DateTime @default(now()) @map("created_at")

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@map("analytics")
}
