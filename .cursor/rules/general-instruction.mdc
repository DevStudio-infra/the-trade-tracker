---
description: 
globs: 
alwaysApply: false
---
---
description: for all code additions
globs: 
---

Verify whether the modifications target the server or client folder before applying any changes, ensuring that updates are executed only within the relevant folder

in client 
# Next.js Client Directory Structure

```
client/
├── src/
│   ├── app/                      # Next.js 13+ App Router
│   │   ├── (auth)/              # Authentication routes (sign-in, sign-up)
│   │   │   ├── sign-in/
│   │   │   │   └── page.tsx
│   │   │   ├── sign-up/
│   │   │   │   └── page.tsx
│   │   │   └── layout.tsx
│   │   │
│   │   ├── (public)/            # Public routes (landing, about, pricing)
│   │   │   ├── page.tsx         # Landing page
│   │   │   ├── about/
│   │   │   │   └── page.tsx
│   │   │   ├── pricing/
│   │   │   │   └── page.tsx
│   │   │   ├── features/
│   │   │   │   └── page.tsx
│   │   │   └── layout.tsx
│   │   │
│   │   ├── (protected)/         # Protected routes (dashboard, trading)
│   │   │   ├── dashboard/
│   │   │   │   ├── page.tsx
│   │   │   │   ├── loading.tsx
│   │   │   │   └── error.tsx
│   │   │   ├── trading/
│   │   │   │   ├── page.tsx
│   │   │   │   ├── loading.tsx
│   │   │   │   └── error.tsx
│   │   │   ├── signals/
│   │   │   │   ├── page.tsx
│   │   │   │   └── [id]/
│   │   │   │       └── page.tsx
│   │   │   ├── settings/
│   │   │   │   ├── page.tsx
│   │   │   │   ├── profile/
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── broker/
│   │   │   │   │   └── page.tsx
│   │   │   │   └── credits/
│   │   │   │       └── page.tsx
│   │   │   ├── analytics/
│   │   │   │   └── page.tsx
│   │   │   └── layout.tsx
│   │   │
│   │   ├── api/                 # API routes
│   │   │   └── trpc/           # tRPC API handlers
│   │   │
│   │   ├── error.tsx           # Root error page
│   │   ├── loading.tsx         # Root loading page
│   │   └── layout.tsx          # Root layout
│   │
│   ├── components/             # React components
│   │   ├── ui/                # shadcn/ui components
│   │   │   ├── button.tsx
│   │   │   ├── card.tsx
│   │   │   ├── dialog.tsx
│   │   │   └── ...
│   │   │
│   │   ├── auth/              # Authentication components
│   │   │   ├── auth-form.tsx
│   │   │   └── user-button.tsx
│   │   │
│   │   ├── charts/            # Trading chart components
│   │   │   ├── candlestick.tsx
│   │   │   └── indicators.tsx
│   │   │
│   │   ├── trading/           # Trading components
│   │   │   ├── order-form.tsx
│   │   │   └── position-card.tsx
│   │   │
│   │   ├── signals/           # Signal components
│   │   │   ├── signal-card.tsx
│   │   │   └── signal-list.tsx
│   │   │
│   │   └── shared/            # Shared components
│   │       ├── header.tsx
│   │       ├── footer.tsx
│   │       └── sidebar.tsx
│   │
│   ├── hooks/                 # Custom React hooks
│   │   ├── use-websocket.ts
│   │   ├── use-trades.ts
│   │   └── use-signals.ts
│   │
│   ├── lib/                   # Utility libraries
│   │   ├── utils.ts           # General utilities
│   │   ├── api.ts            # API client
│   │   └── trpc.ts           # tRPC client
│   │
│   ├── styles/               # Global styles
│   │   ├── globals.css
│   │   └── themes/
│   │       ├── dark.css
│   │       └── light.css
│   │
│   ├── types/                # TypeScript types
│   │   ├── api.ts
│   │   ├── trading.ts
│   │   └── signals.ts
│   │
│   └── config/               # Frontend configuration
│       ├── site.ts          # Site metadata
│       └── dashboard.ts     # Dashboard configuration
│
├── public/                   # Static files
│   ├── images/
│   ├── fonts/
│   └── icons/
│
└── tests/                    # Frontend tests
    ├── components/
    └── pages/

```

## Key Features & Organization

### 1. Route Groups & Layouts

- **(auth)**: Authentication-related pages

  - Protected from authenticated users
  - Custom layout for auth pages
  - Clerk components integration

- **(public)**: Public marketing pages

  - Landing page
  - Features showcase
  - Pricing plans
  - About section

- **(protected)**: Authenticated user pages
  - Protected from unauthenticated users
  - Dashboard with real-time data
  - Trading interface
  - Signal management
  - User settings

### 2. Component Organization

- **ui/**: shadcn/ui components

  - Reusable UI components
  - Consistent styling
  - Theme customization

- **Feature-based folders**:

  - auth/: Authentication components
  - charts/: Trading chart components
  - trading/: Trading interface components
  - signals/: Signal management components

- **shared/**: Common components
  - Header with navigation
  - Responsive sidebar
  - Footer

### 3. Data Management

- **hooks/**: Custom React hooks

  - WebSocket connections
  - Data fetching
  - State management

- **lib/**: Utility functions
  - API client setup
  - tRPC configuration
  - Helper functions

### 4. Styling

- **styles/**: Global styles
  - TailwindCSS configuration
  - Theme customization
  - Global CSS variables

### 5. State Management

- **store/**: Zustand stores for global state

  ```
  src/store/
  ├── trading/                # Trading-related state
  │   ├── useTradeStore.ts    # Positions and orders
  │   └── useWatchlistStore.ts # Watchlist management
  ├── signals/               # Signal-related state
  │   ├── useSignalStore.ts  # Active signals
  │   └── useChartStore.ts   # Chart configurations
  ├── user/                 # User-related state
  │   ├── useCreditsStore.ts # Credits management
  │   └── useSettingsStore.ts # User preferences
  └── websocket/            # WebSocket state
      └── useWebSocketStore.ts # Connection management
  ```

- **queries/**: React Query implementations
  ```
  src/queries/
  ├── trading/              # Trading data queries
  │   ├── useTradeQueries.ts  # Trade history
  │   └── usePriceQueries.ts  # Price data
  ├── signals/             # Signal data queries
  │   └── useSignalQueries.ts # Signal history
  └── user/               # User data queries
      └── useUserQueries.ts   # User data and settings
  ```




in server 
# Server Directory Structure

```
server/
├── src/
│   ├── config/                     # Configuration files
│   │   ├── env.config.ts           # Environment configuration
│   │   ├── supabase.config.ts      # Supabase client configuration
│   │   ├── redis.config.ts         # Redis configuration
│   │   ├── stripe.config.ts        # Stripe configuration
│   │   └── ai.config.ts            # AI models configuration
│   │
│   ├── models/                     # Prisma models and types
│   │   ├── generated/              # Prisma generated types
│   │   └── interfaces/             # Custom interfaces and types
│   │
│   ├── services/                   # Business logic services
│   │   ├── auth/                   # Authentication related services
│   │   ├── broker/                 # Broker integration services
│   │   │   ├── interfaces/         # Broker interface definitions
│   │   │   ├── capital-com/        # Capital.com implementation
│   │   │   └── common/            # Shared broker utilities
│   │   ├── ai/                     # AI services
│   │   │   ├── signal-detection/   # Signal detection logic
│   │   │   ├── confirmation/       # Confirmation logic
│   │   │   └── rag/               # RAG implementation
│   │   ├── trading/               # Trading related services
│   │   ├── credits/               # Credit management
│   │   ├── analytics/             # Analytics services
│   │   └── notifications/         # Notification services
│   │
│   ├── routes/                    # API routes
│   │   ├── v1/                    # API version 1
│   │   │   ├── auth.routes.ts
│   │   │   ├── broker.routes.ts
│   │   │   ├── trading.routes.ts
│   │   │   ├── signals.routes.ts
│   │   │   ├── credits.routes.ts
│   │   │   └── analytics.routes.ts
│   │   └── middleware/            # Route middleware
│   │       ├── auth.middleware.ts
│   │       ├── credits.middleware.ts
│   │       └── validation.middleware.ts
│   │
│   ├── utils/                     # Utility functions
│   │   ├── encryption.utils.ts    # Encryption utilities
│   │   ├── chart.utils.ts         # Chart generation utilities
│   │   ├── validation.utils.ts    # Input validation
│   │   └── error.utils.ts         # Error handling
│   │
│   ├── websocket/                 # WebSocket handlers
│   │   ├── handlers/             # WebSocket event handlers
│   │   └── middleware/           # WebSocket middleware
│   │
│   ├── tasks/                     # Background tasks
│   │   ├── candle-updater.ts     # Candle data updates
│   │   └── cleanup.ts            # Cleanup tasks
│   │
│   ├── cache/                     # Cache management
│   │   ├── redis/                # Redis implementations
│   │   └── interfaces/           # Cache interfaces
│   │
│   └── lib/                       # Shared libraries
│       ├── prisma.ts             # Prisma client
│       ├── supabase.ts           # Supabase client
│       └── redis.ts              # Redis client
│
├── prisma/                        # Prisma configuration
│   ├── schema.prisma             # Database schema
│   └── migrations/               # Database migrations
│
├── tests/                        # Test files
│   ├── unit/                     # Unit tests
│   ├── integration/             # Integration tests
│   └── fixtures/                # Test fixtures
│
└── docs/                         # Documentation
    ├── api/                      # API documentation
    └── setup/                    # Setup guides
```

## Key Organizational Principles

1. **Separation of Concerns**

   - Each directory has a specific responsibility
   - Clear separation between routes, services, and models
   - Business logic isolated in services

2. **Modularity**

   - Related functionality grouped together
   - Each module can be developed/tested independently
   - Easy to add new features without touching existing code

3. **Scalability**

   - Versioned API routes
   - Separate WebSocket handling
   - Background tasks isolation

4. **Maintainability**

   - Consistent structure across features
   - Clear import paths
   - Easy to locate specific functionality

5. **Testing**
   - Separate test directories for different types of tests
   - Fixtures for test data
   - Easy to mock dependencies

## Import Examples

```typescript
// Service import
import { SignalDetectionService } from "@services/ai/signal-detection";

// Route import
import { brokerRoutes } from "@routes/v1/broker.routes";

// Middleware import
import { validateCredits } from "@routes/middleware/credits.middleware";

// Utility import
import { encryptCredentials } from "@utils/encryption.utils";
```

## Environment Configuration

Create separate configuration files for different environments:

```
config/
├── env.config.ts
├── env.development.ts
├── env.production.ts
└── env.test.ts
```

This structure ensures:

- Easy navigation
- Clear dependencies
- Scalable architecture
- Testable components
- Maintainable codebase

